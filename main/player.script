-- movement speed
local SPEED = 20
local ROTATION_SPEED = 100

function init(self)
	self.input = {}
	self.turn_count = 0
	self.rotation_direction = 0 -- -1 - clockwise, 1 - counterclockwise
	self.previous_direction = 0
	self.accumulated_rotation = 0
	msg.post(".", "acquire_input_focus")
	msg.post('/hud#hud', "turns", {turns = self.turn_count})
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function process_rotation(self, target_rotation, target_angle)
	-- get rotation direction from quaternions
	local current_rotation_z = math.floor(go.get_rotation().z * 10000)
	local target_rotation_z = math.floor(target_rotation.z * 10000)

	-- process rotation direction
	-- TODO: I don't like how this code looks. Need to be refactored.
	if current_rotation_z == 0 or ((current_rotation_z < 0) == (target_rotation_z < 0)) then
		if (current_rotation_z <= 0 or current_rotation_z >= 0) and current_rotation_z > target_rotation_z then
			if self.rotation_direction ~= 0 then
				self.previous_direction = self.rotation_direction
			end
			self.rotation_direction = -1
		elseif (current_rotation_z <= 0 or current_rotation_z >= 0) and current_rotation_z < target_rotation_z then
			if self.rotation_direction ~= 0 then
				self.previous_direction = self.rotation_direction
			end
			self.rotation_direction = 1
		end
	else
		if (current_rotation_z < 0 and current_rotation_z < target_rotation_z and current_rotation_z < -500)
		or (current_rotation_z > 0 and current_rotation_z > target_rotation_z and current_rotation_z < 500) then
			if self.rotation_direction ~= 0 then
				self.previous_direction = self.rotation_direction
			end
			self.rotation_direction = -1
		elseif (current_rotation_z < 0 and current_rotation_z < target_rotation_z and current_rotation_z > -500)
		or (current_rotation_z > 0 and current_rotation_z > target_rotation_z and current_rotation_z > 500) then
			if self.rotation_direction ~= 0 then
				self.previous_direction = self.rotation_direction
			end
			self.rotation_direction = 1
		end
	end
	if current_rotation_z == target_rotation_z then
		self.rotation_direction = 0
	end

	-- stop processing if we are not rotating
	if self.rotation_direction == 0 then
		return
	end

	-- reset accumulated rotation on direction change
	if self.previous_direction ~= self.rotation_direction then
		self.accumulated_rotation = 0
	end

	-- the amount of rotation to apply
	local rotation_amount = math.abs(math.abs(target_angle  * 180/3.14159) - math.abs(go.get(".", "euler.z")))

	-- add the amount of rotation to accumulated rotation
	self.accumulated_rotation = self.accumulated_rotation + rotation_amount

	-- have we rotated a full turn?
	if self.accumulated_rotation > 360 then
		self.accumulated_rotation = self.accumulated_rotation - 360
		self.turn_count = self.turn_count + 1
		print(self.turn_count)
		msg.post('/hud#hud', "turns", {turns = self.turn_count})
	end
end

local function process_rotation2(self, dt)
	local crosshair_world = go.get_world_position("target")
	local player_world = go.get_world_position()
	local target_angle = math.atan2(player_world.x - crosshair_world.x, crosshair_world.y - player_world.y) * 180/3.14159

	local current_angle = go.get(".", "euler.z")

	-- normalize to 0-360 degree
	if target_angle < 0 then
		target_angle = 360 + target_angle
	end

	-- get rotation dirrection
	if math.floor(current_angle) == math.floor(target_angle) then
		self.rotation_direction = 0
	else
		local delta_angle = target_angle - current_angle
		if delta_angle > 180 then
			delta_angle = delta_angle - 360
		elseif delta_angle <= -180 then
			delta_angle = delta_angle + 360
		end

		-- fluctuation when moving
		if math.abs(delta_angle) < 2 then
			return
		end

		if delta_angle > 0 then
			self.rotation_direction = 1
		elseif delta_angle < 0 then
			self.rotation_direction = -1
		end
	end

	-- stop processing if we are not rotating
	if self.rotation_direction == 0 then
		return
	end

	if self.rotation_direction ~= self.previous_direction then
		self.accumulated_rotation = 0
		self.previous_direction = self.rotation_direction 
	end

	local rotation_amount = ROTATION_SPEED * dt

	if self.input[hash('touch')] then
		-- add the amount of rotation to accumulated rotation
		self.accumulated_rotation = self.accumulated_rotation + rotation_amount
		-- have we rotated a full turn?
		if self.accumulated_rotation > 360 then
			self.accumulated_rotation = self.accumulated_rotation - 360
			self.turn_count = self.turn_count + 1
			msg.post('/hud#hud', "turns", {turns = self.turn_count}) -- for debug
		end
	else
		-- self.rotation_direction = 0
		self.accumulated_rotation = 0
	end

	self.angle = (current_angle + rotation_amount * self.rotation_direction) % 360
	go.set(".", "euler.z", self.angle)
end


function update(self, dt)
	msg.post("@render:", "draw_text", { text = "Arrows or WASD to move/turn. Mouse to turn. Left mouse button to start rotation count.", position = vmath.vector3(20, 20, 0) } )

	-- update player position
	local pos = go.get_position()
	if self.input[hash("up")] then
		pos.y = pos.y + SPEED * dt
	elseif self.input[hash("down")] then
		pos.y = pos.y - SPEED * dt
	end
	if self.input[hash("left")] then
		pos.x = pos.x - SPEED * dt
	elseif self.input[hash("right")] then
		pos.x = pos.x + SPEED * dt
	end

	go.set_position(pos)
	
	-- rotate towards cursor
	-- local crosshair_world = go.get_world_position("target")
	-- local player_world = go.get_world_position()
	-- local angle = math.atan2(player_world.x - crosshair_world.x, crosshair_world.y - player_world.y)
	-- local rotation = vmath.quat_rotation_z(angle)

	-- process rotation count
	-- if self.input[hash('touch')] then
		-- process_rotation(self, rotation, angle)
	-- else
		-- self.rotation_direction = 0
		-- self.accumulated_rotation = 0
	-- end
	
	-- go.set_rotation(rotation)
	process_rotation2(self, dt)
end

function on_input(self, action_id, action)
	if action_id then
		if action.pressed then
			self.input[action_id] = true
		elseif action.released then
			self.input[action_id] = false
		end
	end
end
